#!/usr/bin/env node

'use strict';

var commander = require('commander');

var debug     = require('debug')('pm2:cli');
var PM2       = require('..');
var Log       = require('../lib/API/Log');
var cst       = require('../constants.js');
var pkg       = require('../package.json');
var path      = require('path');
var fs        = require('fs');
var async     = require('async');
var tree      = require('../lib/tools/pretty-tree/pretty-tree.js');
var pm2;

commander.version(pkg.version)
  .option('--raw', 'raw log output')
  .option('--json', 'output logs in json format')
  .option('--format', 'output logs formated like key=val')
  .option('--env [name]', 'select env_[name] env variables in process config file')
  .option('--secret [key]', 'keymetrics secret key')
  .option('--public [key]', 'keymetrics public key')
  .option('--machine-name [name]', 'keymetrics machine name')
  .option('--auto-exit', 'exit if all processes are errored/stopped or 0 apps launched')
  .usage('start <app>');

commander.command('*')
  .action(function(cmd, opts){
    console.error('Unknown command argument');
    commander.outputHelp();
  });

// @todo need to allow passing same option than pm2 start
commander.command('start <file|json_file>')
  .description('start json_file or application')
  .action(function(cmd, opts) {

    pm2 = new PM2.custom({
      pm2_home : path.join(process.env.HOME, '.pm2'),
      secret_key : process.env.KEYMETRICS_SECRET || commander.secret,
      public_key : process.env.KEYMETRICS_PUBLIC || commander.public,
      machine_name : process.env.INSTANCE_NAME || commander.machineName,
      daemon_mode : true
    });

    if (commander.autoExit)
      autoExit();

    pm2.connect(function() {
      run(cmd, opts);
    });
  });

commander.command('gen')
  .option('--cwd [path]')
  .description('generate Dockerfile with current running apps, modules and right node.js version')
  .action(function(opts) {

    var Common = require('../lib/Common.js');
    var chalk = require('chalk');
    PM2.list(function(err, procs) {
      // does not work with nodejs 0.12
      console.log('procs=%d nodejs_version=%s', procs.length, process.versions.node.split('.')[0]);
      var cwd = opts.cwd ? path.resolve(opts.cwd) : process.cwd();
      console.log('cwd=%s', cwd);

      function hasProcessFile(cwd, cb) {
        var possible_files = ['process.yml',
                              'process.json',
                              'processes.yml',
                              'processes.json',
                              'ecosystem.yml',
                              'ecosystem.json']

        async.forEachLimit(possible_files, 1, function(filename, next) {
          var full_path = path.join(cwd, filename);

          fs.access(full_path, function(err) {
            if (err)
              return next();
            return next(full_path);
          });
        }, function(has_conf) {
          return cb(null, has_conf);
        });
      }

      var str = tree({
        nodes: [{
          label : 'api',
          leaf : {
              instances : '4',
              script : './api.js',
              max_memory_restart : '200M',
              env : {
                NODE_ENV : 'development'
              },
              env_production : {
                NODE_ENV : 'production'
              }
          }
        }, {
          label : 'worker',
          leaf : {
            instances : '1',
            script : './worker.js'
          }
        }]
      });

      var modules = tree({
        label: 'modules',
        leaf: {
          'pm2-server-monit' : {
            version : '2'
          }
        }
      });

      console.log(chalk.bold('Applications'));
      console.log(str);
      console.log(modules);
      // , {
      //   label : 'modules',
      //   leaf : {
      //     'pm2-server-monit' : '2.0'
      //   }
      // }, {
      //   label : 'system',
      //   leaf : {
      //     'node.js version' : process.versions.node.split('.')[0]
      //   }
      // }


      hasProcessFile(cwd, function(err, filepath) {
        console.log(Common.parseConfig(fs.readFileSync(filepath), filepath));
      });
      // Group by app and by modules
      PM2.disconnect();
    });
  });

if (process.argv.length == 2) {
  commander.outputHelp();
  process.exit(1);
}

commander.parse(process.argv);

process.on('SIGINT', function() {
  exitPM2();
});

function run(cmd, opts) {
  var needRaw = commander.raw;

  var timestamp = 'YYYY-MM-DD-HH:mm:ss';

  pm2.start(cmd, commander, function(err, obj) {
    if (err)
      throw new Error(err.message);
    if (commander.format)
      Log.formatStream(pm2.Client, 'all', needRaw, timestamp, false);
    else if (commander.json)
      Log.jsonStream(pm2.Client);
    else
      Log.stream(pm2.Client, 'all', needRaw, timestamp, false);
  });
}

function exitPM2() {
  console.log('Exiting PM2');
  pm2.kill(function() {
    process.exit(0);
  });
}

/**
 * Exit current PM2 instance if 0 app is online
 * function activated via --auto-exit
 */
function autoExit() {
  setTimeout(function() {
    pm2.list(function(err, apps) {
      if (err) console.error(err.stack || err);

      var online_count = 0;

      apps.forEach(function(app) {
        if (app.pm2_env.status == cst.ONLINE_STATUS ||
            app.pm2_env.status == cst.LAUNCHING_STATUS)
          online_count++;
      });

      if (online_count == 0) {
        console.log('0 application online, exiting');
        exitPM2();
      }
      autoExit();
    });
  }, 3000);
}
